name: QA Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET_TEST }}
  NEXTAUTH_URL: http://localhost:3000
  TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
  TEST_REDIS_URL: ${{ secrets.TEST_REDIS_URL }}

jobs:
  # Code Quality and Linting
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Check code formatting
        run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"

  # Unit and Integration Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          export DATABASE_URL="postgresql://test:test@localhost:5432/test_db"
          npm run db:push

      - name: Run unit tests
        run: npm run test:unit
        env:
          TEST_DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          TEST_REDIS_URL: redis://localhost:6379/1

      - name: Run integration tests
        run: npm run test:integration
        env:
          TEST_DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          TEST_REDIS_URL: redis://localhost:6379/1

      - name: Generate test coverage report
        run: npm run test:coverage
        env:
          TEST_DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          TEST_REDIS_URL: redis://localhost:6379/1

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run security tests
        run: npm run test:security

      - name: Run OWASP security tests
        run: npm run test:security -- --testPathPattern=owasp

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@v3.63.2-beta
        with:
          path: ./
          base: main
          head: HEAD

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test database
        run: |
          export DATABASE_URL="postgresql://test:test@localhost:5432/test_db"
          npm run db:push

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/1

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/1
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7

  # Accessibility Tests
  accessibility-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test database
        run: |
          export DATABASE_URL="postgresql://test:test@localhost:5432/test_db"
          npm run db:push

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/1

      - name: Run accessibility tests
        run: npm run test:accessibility
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/1

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: accessibility-test-results
          path: test-results/
          retention-days: 7

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [e2e-tests, accessibility-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test database with performance data
        run: |
          export DATABASE_URL="postgresql://test:test@localhost:5432/test_db"
          npm run db:push
          # Add performance test data if needed

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/1

      - name: Run performance tests
        run: npm run test:performance
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/1

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: test-results/
          retention-days: 30

  # Quality Gates
  quality-gates:
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests, e2e-tests, accessibility-tests, performance-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "Unit tests failed"
            exit 1
          fi
          if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
            echo "Security tests failed"
            exit 1
          fi
          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "E2E tests failed"
            exit 1
          fi
          if [[ "${{ needs.accessibility-tests.result }}" != "success" ]]; then
            echo "Accessibility tests failed"
            exit 1
          fi
          if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
            echo "Performance tests failed"
            exit 1
          fi
          echo "All quality gates passed!"

      - name: Post results to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              unit: '${{ needs.unit-tests.result }}',
              security: '${{ needs.security-tests.result }}',
              e2e: '${{ needs.e2e-tests.result }}',
              accessibility: '${{ needs.accessibility-tests.result }}',
              performance: '${{ needs.performance-tests.result }}'
            };
            
            const passed = Object.values(results).every(r => r === 'success');
            const status = passed ? '✅ PASSED' : '❌ FAILED';
            
            const body = `## QA Testing Results ${status}
            
            | Test Type | Status |
            |-----------|--------|
            | Unit Tests | ${results.unit === 'success' ? '✅' : '❌'} |
            | Security Tests | ${results.security === 'success' ? '✅' : '❌'} |
            | E2E Tests | ${results.e2e === 'success' ? '✅' : '❌'} |
            | Accessibility Tests | ${results.accessibility === 'success' ? '✅' : '❌'} |
            | Performance Tests | ${results.performance === 'success' ? '✅' : '❌'} |
            
            ${passed ? 'All tests passed! This PR is ready for review.' : 'Some tests failed. Please check the details above.'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: always()
    steps:
      - name: Notify team
        if: failure()
        run: |
          echo "QA Pipeline failed. Team should be notified."
          # Add notification logic here (Slack, email, etc.)
          
      - name: Success notification
        if: success()
        run: |
          echo "QA Pipeline completed successfully!"
          # Add success notification logic here