name: Deploy to GCP Cloud Run

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: davila-reis-law-firm-erp
  SERVICE_NAME: davila-reis-erp
  REGION: southamerica-east1

jobs:
  # Test and lint code
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      run: npm test

  # Security scan
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and deploy to staging
  deploy-staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test, security]
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker gcr.io

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --build-arg NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL_STAGING }}" \
          --build-arg NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
          --build-arg GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
          --build-arg GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
          --build-arg SENDGRID_API_KEY="${{ secrets.SENDGRID_API_KEY }}" \
          --build-arg FROM_EMAIL="${{ secrets.FROM_EMAIL }}" \
          --build-arg GCP_PROJECT_ID="$PROJECT_ID" \
          --build-arg GCP_STORAGE_BUCKET="$PROJECT_ID-documents" \
          .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

    - name: Deploy to Cloud Run Staging
      run: |
        gcloud run deploy $SERVICE_NAME-staging \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --service-account davila-reis-app@$PROJECT_ID.iam.gserviceaccount.com \
          --add-cloudsql-instances $PROJECT_ID:$REGION:davila-reis-db \
          --set-env-vars NODE_ENV=staging,GCP_PROJECT_ID=$PROJECT_ID,GCP_STORAGE_BUCKET=$PROJECT_ID-documents \
          --set-secrets DATABASE_URL=DATABASE_URL:latest,NEXTAUTH_URL=NEXTAUTH_URL_STAGING:latest,NEXTAUTH_SECRET=NEXTAUTH_SECRET:latest,GOOGLE_CLIENT_ID=GOOGLE_CLIENT_ID:latest,GOOGLE_CLIENT_SECRET=GOOGLE_CLIENT_SECRET:latest,SENDGRID_API_KEY=SENDGRID_API_KEY:latest,FROM_EMAIL=FROM_EMAIL:latest \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 5 \
          --min-instances 0 \
          --concurrency 80 \
          --timeout 300 \
          --port 3000

    - name: Run health check
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME-staging --platform managed --region $REGION --format 'value(status.url)')
        echo "Service URL: $SERVICE_URL"
        
        # Wait for service to be ready
        sleep 60
        
        # Health check
        curl -f $SERVICE_URL/api/health || exit 1

  # Deploy to production
  deploy-production:
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    needs: [test, security]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker gcr.io

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          -t gcr.io/$PROJECT_ID/$SERVICE_NAME:latest \
          --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --build-arg NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL_PRODUCTION }}" \
          --build-arg NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
          --build-arg GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
          --build-arg GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
          --build-arg SENDGRID_API_KEY="${{ secrets.SENDGRID_API_KEY }}" \
          --build-arg FROM_EMAIL="${{ secrets.FROM_EMAIL }}" \
          --build-arg GCP_PROJECT_ID="$PROJECT_ID" \
          --build-arg GCP_STORAGE_BUCKET="$PROJECT_ID-documents" \
          .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Deploy to Cloud Run Production
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --service-account davila-reis-app@$PROJECT_ID.iam.gserviceaccount.com \
          --add-cloudsql-instances $PROJECT_ID:$REGION:davila-reis-db \
          --set-env-vars NODE_ENV=production,GCP_PROJECT_ID=$PROJECT_ID,GCP_STORAGE_BUCKET=$PROJECT_ID-documents \
          --set-secrets DATABASE_URL=DATABASE_URL:latest,NEXTAUTH_URL=NEXTAUTH_URL_PRODUCTION:latest,NEXTAUTH_SECRET=NEXTAUTH_SECRET:latest,GOOGLE_CLIENT_ID=GOOGLE_CLIENT_ID:latest,GOOGLE_CLIENT_SECRET=GOOGLE_CLIENT_SECRET:latest,SENDGRID_API_KEY=SENDGRID_API_KEY:latest,FROM_EMAIL=FROM_EMAIL:latest \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 20 \
          --min-instances 1 \
          --concurrency 100 \
          --timeout 300 \
          --port 3000 \
          --execution-environment gen2 \
          --cpu-boost

    - name: Configure custom domain
      run: |
        # Map custom domain (if configured)
        if [ -n "${{ secrets.CUSTOM_DOMAIN }}" ]; then
          gcloud run domain-mappings create \
            --service $SERVICE_NAME \
            --domain ${{ secrets.CUSTOM_DOMAIN }} \
            --region $REGION \
            --platform managed
        fi

    - name: Run health check
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')
        echo "Service URL: $SERVICE_URL"
        
        # Wait for service to be ready
        sleep 60
        
        # Health check
        curl -f $SERVICE_URL/api/health || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "âœ… Production deployment successful!"
        echo "Service URL: $(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')"